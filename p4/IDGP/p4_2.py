"""This file corresponds to the 4.2 Image Classification Using Features Extracted by GP (IDGP) in the handout"""

import argparse
import operator
import random
import time

import evalGP_main as evalGP
import feature_function as fe_fs
# only for strongly typed GP
import gp_restrict
import numpy as np
import pandas as pd
import pygraphviz as pgv
# deap package
from deap import base, creator, gp, tools
from sklearn import preprocessing
from sklearn.model_selection import cross_val_score
from sklearn.svm import LinearSVC
from strongGPDataType import Img, Int1, Int2, Int3, Region, Vector


def image_classification_using_feature_extracted_by_GP():
    data_path = {"f1" : ["train_f1.csv",  "test_f1.csv"] , 
                "f2" : ["train_f2.csv", "test_f2.csv"]}

    # load the csv data generated by the p4.py,
    # which are the best pattern files 

    for k,v in data_path.items():
        print("-"*50)
        print(f"We are processing pattern file for {k} now")
        print("-"*20)
        train_data = pd.read_csv(v[0])
        test_data = pd.read_csv(v[1])
        train_X, train_Y = train_data.iloc[:, :-1] , train_data.iloc[:, -1]
        test_X, test_Y = test_data.iloc[:, :-1] , test_data.iloc[:, -1]
        print(f"train_data shape: {train_data.shape}")
        print(f"train_X shape: {train_X.shape}")
        print(f"train_Y shape: {train_Y.shape}")
            
        clf = LinearSVC(max_iter=2000)
    
        clf.fit(train_X, train_Y)
        # use the cross validation to evaluate the model
        scores = cross_val_score(clf, train_X, train_Y, cv=5)
        print(f"Train accuracy:")
        print(f"cross validation score: {scores}")
        print(f"cross validation mean score: {scores.mean()}")

        # use the test data to evaluate the model
        test_score = clf.score(test_X, test_Y)
        print(f"Test accuracy: {test_score}")
        
image_classification_using_feature_extracted_by_GP()    
